import java.io.FileReader;

public static ArrayList readFileToStringArrayList(String fileName) {
    BufferedReader reader = new BufferedReader(new FileReader(fileName));
    lines = new ArrayList();
    String line;
    while((line = reader.readLine()) != null) {
        lines.add(line);
    }
    reader.close();
    return lines;
}

/* EITHER reads in correlation data already calculated
/* OR reads in data and performs either Pearson or Spearman Rank correlation
/* algorithm equivalent to Matlab Function corr(X,'rows','pairwise','type'.'Pearson') or Spearman
/* Handles NaN, Inf and 0 in data
// Study data - Peak List (indata) - PeakNo/mz/rt - HEADER ROW, tab-delimited *.txt file
// EITHER correlation data (already calculated) or peak data to be correlated (mydata)
/* CorrData - matrix m x m (no Header Row) or PeakData - matrix m peaks x n samples (no Header Row)
/* EITHER *.txt OR *.csv file

//**Returns the correlation matrix (Pearson's r) for the columns in 'data'*/
public static double getPearsonCorrelationMatrix(int v1, int v2, double[][] data) {
	System.out.println("v1: " + v1);
	System.out.println("v2: " + v2);
	System.out.println("No of rows: " + data.length);
	System.out.println("No of cols: " + data[0].length);
	int len = data.length;
	double tcorr=0.0;
	double x = 0.0;
	double y = 0.0;
	double xy =0.0;
	double xSquared = 0.0;
	double ySquared = 0.0;
	int invalidDataCount = 0;
	double numerator = 0.0;
	double denominator = 0.0;

    int klen=len;
    int okflag;
	for(int k=0;k<len;k++) {
	    // Check for NA
	    if(Double.isNaN(data[k][v1]) || Double.isInfinite(data[k][v1]) || Double.isInfinite(data[k][v2]) || Double.isNaN(data[k][v2])) {
            //System.out.println("Value is NA");
            klen=klen-1;
		    continue;
	    }
	    x += data[k][v1];
	    y += data[k][v2];
		xy += data[k][v1] * data[k][v2];
		System.out.println("counter k: " + k);
		System.out.println("data[k][v1]: " + data[k][v1]);
		System.out.println("data[k][v2]: " + data[k][v2]);
		//System.out.println("x: " + x);
        //System.out.println("y: " + y);
        //System.out.println("xy: " + xy);
	    xSquared += Math.pow(data[k][v1],2.0);
		ySquared += Math.pow(data[k][v2],2.0);
    }
    //System.out.println("x: " + x);
    //System.out.println("y: " + y);
    //System.out.println("xy: " + xy);
	numerator = klen * xy - x * y;
	denominator = Math.sqrt(klen * xSquared - Math.pow(x, 2.0)) * Math.sqrt(klen * ySquared - Math.pow(y, 2.0));
	tcorr = numerator / denominator;
    //System.out.println("tcorr: " + tcorr);
    return tcorr;
}

// Sort out input data
double[] mtcars_wt = new double[]{2.620,2.875,2.320,3.215,3.440,3.460,3.570,3.190,3.150,3.440,3.440,4.070,3.730,3.780,5.250,5.424,5.345,2.200,1.615,1.835,2.465,3.520,3.435,3.840,3.845,1.935,2.140,1.513,3.170,2.770,3.570,2.780};
double[] mtcars_mpg = new double[]{21.0,21.0,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,17.8,16.4,17.3,15.2,10.4,10.4,14.7,32.4,30.4,33.9,21.5,15.5,15.2,13.3,19.2,27.3,26.0,30.4,15.8,19.7,15.0,21.4};
double[][] data = new double[][]{{2.620,21.0},{2.875,21.0},{2.320,22.8},{3.215,21.4},{3.440,18.7},{3.460,18.1},{3.570,14.3},{3.190,24.4},{3.150,22.8},{3.440,19.2},{3.440,17.8},{4.070,16.4},{3.730,17.3},{3.780,15.2},{5.250,10.4},{5.424,10.4},{5.345,14.7},{2.200,32.4},{1.615,30.4},{1.835,33.9},{2.465,21.5},{3.520,15.5},{3.435,15.2},{3.840,13.3},{3.845,19.2},{1.935,27.3},{2.140,26.0},{1.513,30.4},{3.170,15.8},{2.770,19.7},{3.570,15.0},{2.780,21.4}};

tcorr = getPearsonCorrelationMatrix(0, 1, data);
System.out.println("Correlation coefficient: " + tcorr);



